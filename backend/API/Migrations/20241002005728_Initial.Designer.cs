// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(WebAppDbContext))]
    [Migration("20241002005728_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API.Models.Activo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Componentes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("IdActivoTipoCategoria")
                        .HasColumnType("int");

                    b.Property<string>("IdCodigo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("IdCondicion")
                        .HasColumnType("int");

                    b.Property<int?>("IdDepartamento")
                        .HasColumnType("int");

                    b.Property<int?>("IdInformacion")
                        .HasColumnType("int");

                    b.Property<int?>("IdLocalidad")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Modelo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Serial")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdActivoTipoCategoria");

                    b.HasIndex("IdCondicion");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdInformacion");

                    b.HasIndex("IdLocalidad");

                    b.ToTable("Activo", "Inventario");
                });

            modelBuilder.Entity("API.Models.ActivoTipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(101)
                        .IsUnicode(false)
                        .HasColumnType("varchar(101)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nombre" }, "UNIQ_NombreActivoTipo")
                        .IsUnique();

                    b.ToTable("ActivoTipo", "Inventario");
                });

            modelBuilder.Entity("API.Models.ActivoTipoCategorium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("IdActivoTipo")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("IdActivoTipo");

                    b.ToTable("ActivoTipoCategoria", "Inventario");
                });

            modelBuilder.Entity("API.Models.Condicion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Condicion", "Inventario");
                });

            modelBuilder.Entity("API.Models.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(101)
                        .IsUnicode(false)
                        .HasColumnType("varchar(101)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nombre" }, "UNIQ_NombreDepartamento")
                        .IsUnique();

                    b.ToTable("Departamento", "Compania");
                });

            modelBuilder.Entity("API.Models.Informacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(51)
                        .IsUnicode(false)
                        .HasColumnType("varchar(51)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(201)
                        .IsUnicode(false)
                        .HasColumnType("varchar(201)");

                    b.Property<bool?>("EstaActiva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NombreComercial")
                        .IsRequired()
                        .HasMaxLength(51)
                        .IsUnicode(false)
                        .HasColumnType("varchar(51)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(51)
                        .IsUnicode(false)
                        .HasColumnType("varchar(51)");

                    b.Property<int>("Rnc")
                        .HasColumnType("int")
                        .HasColumnName("RNC");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Alias" }, "UNIQ_ALIAS")
                        .IsUnique();

                    b.HasIndex(new[] { "Rnc" }, "UNIQ_RNC")
                        .IsUnique();

                    b.ToTable("Informacion", "Compania");
                });

            modelBuilder.Entity("API.Models.Inventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Nombre")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Inventario", "Inventario");
                });

            modelBuilder.Entity("API.Models.Localidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(101)
                        .IsUnicode(false)
                        .HasColumnType("varchar(101)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nombre" }, "UNIQ_NombreLocalidad")
                        .IsUnique();

                    b.ToTable("Localidad", "Compania");
                });

            modelBuilder.Entity("API.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("IdActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("IdInformacion")
                        .HasColumnType("int");

                    b.Property<int?>("TotalActivos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("total_activos")
                        .HasDefaultValueSql("((0))");

                    b.ToTable("Stock", "Inventario");
                });

            modelBuilder.Entity("API.Models.Unidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(101)
                        .IsUnicode(false)
                        .HasColumnType("varchar(101)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nombre" }, "UNIQ_NombreUnidad")
                        .IsUnique();

                    b.ToTable("Unidad", "Compania");
                });

            modelBuilder.Entity("API.Models.Usuario", b =>
                {
                    b.Property<string>("Alias")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Contrasena")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<bool?>("EstaActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("IdEmpleado")
                        .HasColumnType("int");

                    b.ToTable("Usuario", "Autenticacion");
                });

            modelBuilder.Entity("API.Models.ViewActivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IdCodigo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToView("ViewActivo");
                });

            modelBuilder.Entity("InventarioActivo", b =>
                {
                    b.Property<int>("IdActivo")
                        .HasColumnType("int");

                    b.Property<int>("IdInventario")
                        .HasColumnType("int");

                    b.HasKey("IdActivo", "IdInventario")
                        .HasName("PK_InventarioActivo_ID");

                    b.HasIndex("IdInventario");

                    b.ToTable("InventarioActivo", "Inventario");
                });

            modelBuilder.Entity("API.Models.Activo", b =>
                {
                    b.HasOne("API.Models.ActivoTipoCategorium", "IdActivoTipoCategoriaNavigation")
                        .WithMany("Activos")
                        .HasForeignKey("IdActivoTipoCategoria")
                        .HasConstraintName("FK_ActivoTipoCategoria_ID");

                    b.HasOne("API.Models.Condicion", "IdCondicionNavigation")
                        .WithMany("Activos")
                        .HasForeignKey("IdCondicion")
                        .HasConstraintName("FK_Condicion_ID");

                    b.HasOne("API.Models.Departamento", "IdDepartamentoNavigation")
                        .WithMany("Activos")
                        .HasForeignKey("IdDepartamento")
                        .HasConstraintName("FK_Departamento_ID");

                    b.HasOne("API.Models.Informacion", "IdInformacionNavigation")
                        .WithMany("Activos")
                        .HasForeignKey("IdInformacion")
                        .HasConstraintName("FK_Informacion_ID");

                    b.HasOne("API.Models.Localidad", "IdLocalidadNavigation")
                        .WithMany("Activos")
                        .HasForeignKey("IdLocalidad")
                        .HasConstraintName("FK_Localidad_ID");

                    b.Navigation("IdActivoTipoCategoriaNavigation");

                    b.Navigation("IdCondicionNavigation");

                    b.Navigation("IdDepartamentoNavigation");

                    b.Navigation("IdInformacionNavigation");

                    b.Navigation("IdLocalidadNavigation");
                });

            modelBuilder.Entity("API.Models.ActivoTipoCategorium", b =>
                {
                    b.HasOne("API.Models.ActivoTipo", "IdActivoTipoNavigation")
                        .WithMany("ActivoTipoCategoria")
                        .HasForeignKey("IdActivoTipo")
                        .HasConstraintName("FK_ActivoTipoCategoriaID");

                    b.Navigation("IdActivoTipoNavigation");
                });

            modelBuilder.Entity("InventarioActivo", b =>
                {
                    b.HasOne("API.Models.Activo", null)
                        .WithMany()
                        .HasForeignKey("IdActivo")
                        .IsRequired()
                        .HasConstraintName("FK_ActivoID_ID");

                    b.HasOne("API.Models.Inventario", null)
                        .WithMany()
                        .HasForeignKey("IdInventario")
                        .IsRequired()
                        .HasConstraintName("FK_Inventario_ID");
                });

            modelBuilder.Entity("API.Models.ActivoTipo", b =>
                {
                    b.Navigation("ActivoTipoCategoria");
                });

            modelBuilder.Entity("API.Models.ActivoTipoCategorium", b =>
                {
                    b.Navigation("Activos");
                });

            modelBuilder.Entity("API.Models.Condicion", b =>
                {
                    b.Navigation("Activos");
                });

            modelBuilder.Entity("API.Models.Departamento", b =>
                {
                    b.Navigation("Activos");
                });

            modelBuilder.Entity("API.Models.Informacion", b =>
                {
                    b.Navigation("Activos");
                });

            modelBuilder.Entity("API.Models.Localidad", b =>
                {
                    b.Navigation("Activos");
                });
#pragma warning restore 612, 618
        }
    }
}
